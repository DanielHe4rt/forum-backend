<?php

namespace DoctrineProxies\__CG__\TrophyForum\Posts\Domain;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \TrophyForum\Posts\Domain\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'id', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'subForum', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'author', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'title', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'content', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'isOpen', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'responses', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'slug', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'createdAt', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'updatedAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'id', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'subForum', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'author', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'title', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'content', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'isOpen', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'responses', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'slug', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'createdAt', '' . "\0" . 'TrophyForum\\Posts\\Domain\\Post' . "\0" . 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function id(): \TrophyForum\Posts\Domain\PostId
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'id', []);

        return parent::id();
    }

    /**
     * {@inheritDoc}
     */
    public function subForum(): \TrophyForum\SubForums\Domain\SubForum
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'subForum', []);

        return parent::subForum();
    }

    /**
     * {@inheritDoc}
     */
    public function author(): \TrophyForum\Authors\Domain\Author
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'author', []);

        return parent::author();
    }

    /**
     * {@inheritDoc}
     */
    public function title(): \Shared\Domain\ValueObject\Title
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'title', []);

        return parent::title();
    }

    /**
     * {@inheritDoc}
     */
    public function content(): \Shared\Domain\ValueObject\Content
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'content', []);

        return parent::content();
    }

    /**
     * {@inheritDoc}
     */
    public function isOpen(): \TrophyForum\Posts\Domain\PostIsOpen
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOpen', []);

        return parent::isOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function responses(): ?\TrophyForum\Responses\Domain\Responses
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'responses', []);

        return parent::responses();
    }

    /**
     * {@inheritDoc}
     */
    public function slug(): \Shared\Domain\ValueObject\Slug
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'slug', []);

        return parent::slug();
    }

    /**
     * {@inheritDoc}
     */
    public function createdAt(): \Shared\Domain\ValueObject\CreatedAt
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createdAt', []);

        return parent::createdAt();
    }

    /**
     * {@inheritDoc}
     */
    public function updatedAt(): \Shared\Domain\ValueObject\UpdatedAt
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updatedAt', []);

        return parent::updatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function addResponses(\TrophyForum\Responses\Domain\Responses $responses): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addResponses', [$responses]);

        parent::addResponses($responses);
    }

}
